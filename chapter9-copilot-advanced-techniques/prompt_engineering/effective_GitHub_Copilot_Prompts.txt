# Effective GitHub Copilot Prompts for Code Generation

The following prompts demonstrate advanced prompt engineering techniques to get the most out of GitHub Copilot. Each prompt follows best practices for clarity, specificity, and context.

## 1. Zero-Shot Prompts (Simple Context)

// Generate a utility function to format currency values with proper separators and currency symbol
// Input: 1234567.89, "USD"
// Output: "$1,234,567.89"

// Create a debounce function that limits how often a function can be called
// Implement with a 300ms default timeout and proper TypeScript types

// Write a function that validates an email address using regex with explanatory comments
// Should handle common domains, reject invalid formats, and support subdomains

## 2. One-Shot Prompts (With Examples)

// Based on this example validator:
// function validatePassword(password) {
//   return password.length >= 8 && 
//          /[A-Z]/.test(password) && 
//          /[a-z]/.test(password) && 
//          /[0-9]/.test(password);
// }
//
// Create a comprehensive form validator that checks username, email, and phone number

// Here's a basic React component:
// function Button({ text, onClick }) {
//   return <button onClick={onClick}>{text}</button>;
// }
//
// Create an enhanced Button component with loading state, disabled state, various sizes, and proper TypeScript typing

## 3. Few-Shot Prompts (Multiple Examples)

// Example 1: Simple counter hook
// function useCounter(initialValue = 0) {
//   const [count, setCount] = useState(initialValue);
//   const increment = () => setCount(c => c + 1);
//   const decrement = () => setCount(c => c - 1);
//   const reset = () => setCount(initialValue);
//   return { count, increment, decrement, reset };
// }
//
// Example 2: Simple toggle hook
// function useToggle(initialValue = false) {
//   const [value, setValue] = useState(initialValue);
//   const toggle = () => setValue(v => !v);
//   return [value, toggle];
// }
//
// Create a useLocalStorage hook that synchronizes state with localStorage

## 4. Context-Rich Prompts

// We have a e-commerce application with a shopping cart feature.
// The cart is stored in localStorage and has the following structure:
// {
//   items: [{ id: number, name: string, price: number, quantity: number }],
//   totalItems: number,
//   totalPrice: number
// }
// Create a set of React hooks to manage this cart with add, remove, update, and clear functionality

// Our authentication system uses JWT tokens stored in localStorage.
// Tokens expire after 1 hour and need to be refreshed.
// Create an auth context provider and hook to handle login, logout, token refresh, and protected routes

## 5. Function-Specific Optimization Prompts

// Write an optimized algorithm for finding the longest increasing subsequence in an array
// Include time and space complexity analysis and handle edge cases

// Create a custom memoization function for expensive calculations
// Should support complex object arguments by serializing them for cache keys
// Include TypeScript generics for type safety

## 6. Testing-Focused Prompts

// Given this sorting function:
// function quickSort(arr) {
//   if (arr.length <= 1) return arr;
//   const pivot = arr[0];
//   const left = arr.slice(1).filter(x => x < pivot);
//   const right = arr.slice(1).filter(x => x >= pivot);
//   return [...quickSort(left), pivot, ...quickSort(right)];
// }
//
// Write comprehensive Jest tests covering: empty arrays, sorted arrays, reverse sorted arrays, 
// arrays with duplicates, large arrays, and arrays with negative numbers

// Create a test suite for a React login form component that validates input, shows errors,
// handles API submission, and redirects on success
// Include mocking of API calls and user events testing

## 7. Cross-Platform Compatibility Prompts

// Create a utility function for safely accessing nested object properties that works in both
// Node.js and browser environments
// Example usage: getNestedValue(obj, 'user.address.city', 'Unknown')

// Write a date formatting utility that handles browser inconsistencies and timezone differences
// Should support various format patterns and be lightweight

## 8. Refactoring-Focused Prompts

// Refactor this nested callback code to use async/await for better readability:
// function getUser(userId, callback) {
//   fetchUser(userId, (error, user) => {
//     if (error) return callback(error);
//     fetchUserPosts(user.id, (error, posts) => {
//       if (error) return callback(error);
//       fetchPostComments(posts[0].id, (error, comments) => {
//         if (error) return callback(error);
//         callback(null, { user, posts, comments });
//       });
//     });
//   });
// }

// Refactor this class-based React component to a functional component with hooks:
// class UserProfile extends React.Component {
//   constructor(props) {
//     super(props);
//     this.state = { user: null, loading: true, error: null };
//   }
//   
//   componentDidMount() {
//     fetchUser(this.props.userId)
//       .then(user => this.setState({ user, loading: false }))
//       .catch(error => this.setState({ error, loading: false }));
//   }
//   
//   render() {
//     if (this.state.loading) return <div>Loading...</div>;
//     if (this.state.error) return <div>Error: {this.state.error.message}</div>;
//     return <div>Welcome, {this.state.user.name}!</div>;
//   }
// }

## 9. Security-Focused Prompts

// Create a secure password hashing and verification utility using bcrypt
// Include proper salt rounds, async/await support, and thorough error handling

// Write a middleware function for Express.js that validates and sanitizes
// all incoming request parameters to prevent injection attacks
// Should handle nested objects and arrays

## 10. API Integration Prompts

// Create a reusable fetch wrapper with automatic JWT authentication, 
// refresh token handling, request timeout, retry logic, and error handling
// Support for JSON and FormData requests

// Build a GraphQL query builder utility that constructs complex nested queries
// with fragments, variables, and directive support
// Example usage: buildQuery('user', { id: '123' }, ['name', 'email', { posts: ['title', 'body'] }])